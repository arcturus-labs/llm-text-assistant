import React from 'react';
import { useState, useRef, useEffect } from 'react';
import ArtifactPanel from './components/ArtifactPanel';
import MessageContent from './components/MessageContent';
import SubscriptionCheck from './components/SubscriptionCheck';
import './App.css';

//TODO! change these
const cursor_example={"messages":[{"content":"How does Cursor's Tab autocomplete feature differ from GitHub Copilot?","role":"user"},{"content":[{"text":"Let me check the relevant sections about Cursor's Tab feature and Copilot migration to answer your question.","type":"text"},{"input":{"section_id":"1951e9e0"},"name":"expand_section","output":"<a href=\"#1951e9e0\">Overview</a>","type":"tool_use"}],"role":"assistant"},{"content":[{"input":{"section_id":"7aada6da"},"name":"expand_section","output":"<a href=\"#7aada6da\">Migrate from GitHub Copilot</a>","type":"tool_use"}],"role":"assistant"},{"content":"Based on the information from the \"Overview\" and \"Migrate from GitHub Copilot\" sections, here are the key differences between Cursor's Tab autocomplete and GitHub Copilot:\n\n1. Edit Capabilities:\n- Cursor Tab can make both insertions AND edits to existing code around your cursor\n- Copilot can only insert new text at the cursor position, but cannot edit or remove existing code\n\n2. Multi-line Changes:\n- Cursor Tab can modify multiple lines at once\n- Cursor can make changes from one line above to two lines below your current line\n\n3. Context Awareness:\n- Cursor Tab maintains a history of your recent changes in its context window, helping it better understand what you're trying to do\n- It can also make suggestions based on linter errors\n\n4. Suggestion Display:\n- For simple text additions, Cursor shows grey text\n- For code modifications, it displays a diff popup to the right of your current line\n- You can accept suggestions with Tab, or partially accept them word-by-word using Ctrl/⌘ →\n\n5. Usage:\n- Free users get 2000 suggestions\n- Pro and Business plans get unlimited suggestions\n\nThese improvements make Cursor Tab a more comprehensive code assistance tool compared to GitHub Copilot, as it can not only complete code but also help with code modifications and improvements based on context.","role":"assistant"}],"artifacts":[{"content":"\n\n\n# AI Review (Beta) <!-- Section collapsed - expand with expand_section(\"07f3277d\") -->\n\nAI Review is a feature that allows you to review your recent changes in your codebase to catch any potential...\n\n\n\n### Custom Review Instructions... <!-- Section collapsed - expand with expand_section(\"f5cc6b18\") -->\n\n### Review Options... <!-- Section collapsed - expand with expand_section(\"aaa9c5c8\") -->\n\n# Custom API Keys <!-- Section collapsed - expand with expand_section(\"919b9b9a\") -->\n\n\n\n...\n\n### OpenAI API Keys... <!-- Section collapsed - expand with expand_section(\"9db61152\") -->\n\n### Anthropic API Keys... <!-- Section collapsed - expand with expand_section(\"13471f04\") -->\n\n### Google API Keys... <!-- Section collapsed - expand with expand_section(\"25ff5a5c\") -->\n\n### Azure Integration... <!-- Section collapsed - expand with expand_section(\"d851e3fd\") -->\n\n### Will my API key be stored or leave my device?... <!-- Section collapsed - expand with expand_section(\"0da6eab3\") -->\n\n# Models <!-- Section collapsed - expand with expand_section(\"a8a96034\") -->\n\nWith Cursor Chat, Ctrl/⌘ K, and Terminal Ctrl/⌘ K, you can easily switch between different models of your...\n\n\n\n### Model Dropdown... <!-- Section collapsed - expand with expand_section(\"b9e8ef5c\") -->\n\n### Long Context Only Models... <!-- Section collapsed - expand with expand_section(\"11304f12\") -->\n\n### What context window is used for model X?... <!-- Section collapsed - expand with expand_section(\"f1d4f327\") -->\n\n# Shadow Workspace <!-- Section collapsed - expand with expand_section(\"19de16c2\") -->\n\nThe shadow workspace is an opt-in setting you can configure to improve the quality of AI-generated code...\n\n\n\n# Apply <!-- Section collapsed - expand with expand_section(\"bc29386f\") -->\n\nCursor's `Apply` allows you to quickly integrate a codeblock suggestion from the chat into your code...\n\n\n\n### Apply Code Blocks... <!-- Section collapsed - expand with expand_section(\"3373a6d2\") -->\n\n### Accept or Reject... <!-- Section collapsed - expand with expand_section(\"2e691f95\") -->\n\n# With Codebase <!-- Section collapsed - expand with expand_section(\"e60b38a5\") -->\n\n\n\n...\n\n### Default Codebase Chat... <!-- Section collapsed - expand with expand_section(\"eaee06ed\") -->\n\n### Embeddings Search... <!-- Section collapsed - expand with expand_section(\"fdaa6b65\") -->\n\n### Advanced Codebase Search... <!-- Section collapsed - expand with expand_section(\"8b771595\") -->\n\n# Customize <!-- Section collapsed - expand with expand_section(\"ef914ec4\") -->\n\n\n\n...\n\n### Choose an AI Model... <!-- Section collapsed - expand with expand_section(\"3fe825b5\") -->\n\n### In-Editor... <!-- Section collapsed - expand with expand_section(\"edbbc751\") -->\n\n### Settings... <!-- Section collapsed - expand with expand_section(\"97125cf1\") -->\n\n# Overview <!-- Section collapsed - expand with expand_section(\"37123a8d\") -->\n\nCursor Chat lets you ask questions or solve problems in your codebase with the most capable language models...\n\n\n\n### User and AI Messages... <!-- Section collapsed - expand with expand_section(\"ae720594\") -->\n\n### Chat History... <!-- Section collapsed - expand with expand_section(\"efe52475\") -->\n\n### Default Context... <!-- Section collapsed - expand with expand_section(\"42c1f720\") -->\n\n### Adding Context... <!-- Section collapsed - expand with expand_section(\"d5869788\") -->\n\n### AI Fix in Chat... <!-- Section collapsed - expand with expand_section(\"b664011c\") -->\n\n### Long Context Chat (Beta)... <!-- Section collapsed - expand with expand_section(\"6e451b62\") -->\n\n# Overview <!-- Section collapsed - expand with expand_section(\"3d0ddc02\") -->\n\nCmd K, also known or \"Ctrl K\" on Windows/Linux, allows you to generate new code or edit existing code...\n\n\n\n### Prompt Bars... <!-- Section collapsed - expand with expand_section(\"549c81dc\") -->\n\n### Inline Generation... <!-- Section collapsed - expand with expand_section(\"ec00a895\") -->\n\n### Inline Edits... <!-- Section collapsed - expand with expand_section(\"e5d47dc9\") -->\n\n### Follow-up Instructions... <!-- Section collapsed - expand with expand_section(\"cce56fad\") -->\n\n### Default Context... <!-- Section collapsed - expand with expand_section(\"45d2f0e5\") -->\n\n### Quick Question... <!-- Section collapsed - expand with expand_section(\"2040a81f\") -->\n\n# Terminal Cmd K <!-- Section collapsed - expand with expand_section(\"1fd37863\") -->\n\nIn the built-in Cursor terminal, you can press `Ctrl/⌘ K` to open a prompt bar on the bottom of the terminal...\n\n\n\n# @Chat <!-- Section collapsed - expand with expand_section(\"872fe4e9\") -->\n\n\n\n...\n\n### `@Chat`... <!-- Section collapsed - expand with expand_section(\"bb1780ee\") -->\n\n# @Code <!-- Section collapsed - expand with expand_section(\"aea2c6fa\") -->\n\n\n\n...\n\n### `@Code`... <!-- Section collapsed - expand with expand_section(\"1edeacf0\") -->\n\n### Code Preview... <!-- Section collapsed - expand with expand_section(\"12d9023e\") -->\n\n### From the Editor... <!-- Section collapsed - expand with expand_section(\"ad6528c5\") -->\n\n# @Codebase <!-- Section collapsed - expand with expand_section(\"910f126d\") -->\n\n\n\n...\n\n### `@Codebase`... <!-- Section collapsed - expand with expand_section(\"f84fb29a\") -->\n\n# @Definitions <!-- Section collapsed - expand with expand_section(\"700a85d7\") -->\n\n\n\n...\n\n### `@Definitions`... <!-- Section collapsed - expand with expand_section(\"6850063a\") -->\n\n# @Docs <!-- Section collapsed - expand with expand_section(\"4dc9f2be\") -->\n\n\n\n...\n\n### `@Docs`... <!-- Section collapsed - expand with expand_section(\"a6b6c11d\") -->\n\n### Add Custom Docs... <!-- Section collapsed - expand with expand_section(\"8c7e3f18\") -->\n\n### Manage Custom Docs... <!-- Section collapsed - expand with expand_section(\"285bdec2\") -->\n\n# @Files <!-- Section collapsed - expand with expand_section(\"7144b97d\") -->\n\n\n\n...\n\n### `@Files`... <!-- Section collapsed - expand with expand_section(\"4744a5ca\") -->\n\n### Chat Long File References... <!-- Section collapsed - expand with expand_section(\"6e7a959e\") -->\n\n### Cmd K Chunking Strategy... <!-- Section collapsed - expand with expand_section(\"aea6891d\") -->\n\n### Drag and Drop... <!-- Section collapsed - expand with expand_section(\"16a0f26a\") -->\n\n# @Folders <!-- Section collapsed - expand with expand_section(\"84af1603\") -->\n\n\n\n...\n\n### `@Folders`... <!-- Section collapsed - expand with expand_section(\"1a7cf269\") -->\n\n# @Git <!-- Section collapsed - expand with expand_section(\"36538c61\") -->\n\n\n\n...\n\n### `@Git`... <!-- Section collapsed - expand with expand_section(\"be0ee1ba\") -->\n\n### Common Use Cases... <!-- Section collapsed - expand with expand_section(\"b4c9b002\") -->\n\n# Paste Links <!-- Section collapsed - expand with expand_section(\"5121dd4a\") -->\n\n\n\n...\n\n### `@https://your-link.com`... <!-- Section collapsed - expand with expand_section(\"b635ee29\") -->\n\n### Remove Links... <!-- Section collapsed - expand with expand_section(\"491d1544\") -->\n\n# @Web <!-- Section collapsed - expand with expand_section(\"3bd165a8\") -->\n\n\n\n...\n\n### `@Web`... <!-- Section collapsed - expand with expand_section(\"eedc8130\") -->\n\n### Always On... <!-- Section collapsed - expand with expand_section(\"b13f1ae9\") -->\n\n# Basic Usage <!-- Section collapsed - expand with expand_section(\"4d3bc240\") -->\n\nIn Cursor's AI input boxes, such as in Cmd K, Chat, or Terminal Cmd K, you can use @ symbols by typing...\n\n\n\n### Keyboard Shortcuts... <!-- Section collapsed - expand with expand_section(\"90b10825\") -->\n\n### Cmd K Keyboard Shortcut... <!-- Section collapsed - expand with expand_section(\"37d5c237\") -->\n\n# Codebase Indexing <!-- Section collapsed - expand with expand_section(\"5b8631d3\") -->\n\n\n\n...\n\n### Index your Codebase... <!-- Section collapsed - expand with expand_section(\"bc13c3ef\") -->\n\n### Advanced Settings... <!-- Section collapsed - expand with expand_section(\"710e66e4\") -->\n\n# Ignore Files <!-- Section collapsed - expand with expand_section(\"cb6ef065\") -->\n\nTo ignore files to be included in Cursor features such as [codebase indexing](/context/codebase-indexing...\n\n\n\n### Example `.cursorignore` files... <!-- Section collapsed - expand with expand_section(\"dce749d8\") -->\n\n# Rules for AI <!-- Section collapsed - expand with expand_section(\"612eab37\") -->\n\nYou can add custom instructions to Cursor by modifying the `Rules for AI` section under `Cursor Settings...\n\n\n\n### `.cursorrules`... <!-- Section collapsed - expand with expand_section(\"9fe88951\") -->\n\n# Migrate from VS Code <!-- Section collapsed - expand with expand_section(\"8f0c463a\") -->\n\nCursor is a fork of VS Code. This allows us to focus on making the best way to code with AI, while offering...\n\n\n\n### Import Extensions, Themes, Settings, and Keybindings... <!-- Section collapsed - expand with expand_section(\"2f877c5c\") -->\n\n### Staying Up to Date... <!-- Section collapsed - expand with expand_section(\"bcdd5afa\") -->\n\n### Why Not an Extension?... <!-- Section collapsed - expand with expand_section(\"e4cc6d86\") -->\n\n### Settings... <!-- Section collapsed - expand with expand_section(\"a76da175\") -->\n\n### Why is the Activity Bar in Cursor horizontal?... <!-- Section collapsed - expand with expand_section(\"3ef08f65\") -->\n\n# Usage <!-- Section collapsed - expand with expand_section(\"c13da08f\") -->\n\n\n\n...\n\n### Subscription Tiers... <!-- Section collapsed - expand with expand_section(\"01411331\") -->\n\n### Premium models... <!-- Section collapsed - expand with expand_section(\"3fa2b195\") -->\n\n### Pro Trial... <!-- Section collapsed - expand with expand_section(\"b7564d18\") -->\n\n### Fast and Slow Requests... <!-- Section collapsed - expand with expand_section(\"18fef806\") -->\n\n### Check Your Usage... <!-- Section collapsed - expand with expand_section(\"87eee437\") -->\n\n### Optional Usage-based Pricing... <!-- Section collapsed - expand with expand_section(\"5a0056d1\") -->\n\n# Privacy FAQ <!-- Section collapsed - expand with expand_section(\"b4413bc1\") -->\n\n\n\n...\n\n### What is Privacy Mode?... <!-- Section collapsed - expand with expand_section(\"9d9dab42\") -->\n\n### Are requests always routed through the Cursor backend?... <!-- Section collapsed - expand with expand_section(\"65c9182e\") -->\n\n### Does indexing the codebase require storing code?... <!-- Section collapsed - expand with expand_section(\"31b09198\") -->\n\n# Advanced Features <!-- Section collapsed - expand with expand_section(\"85ffb0b2\") -->\n\n\n\n...\n\n### Tab in Peek... <!-- Section collapsed - expand with expand_section(\"298b4a5e\") -->\n\n### <div className=\"flex items-center\" style={{ gap: '6px' }}>  <span className=\"cursor-pointer my-0\">Cursor Prediction</span></div>... <!-- Section collapsed - expand with expand_section(\"a3533dc3\") -->\n\n### <div className=\"flex items-center\" style={{ gap: '6px' }}>  <span className=\"cursor-pointer my-0\">Partial Accepts</span></div>... <!-- Section collapsed - expand with expand_section(\"5dc816a2\") -->\n\n# Migrate from GitHub Copilot <!-- Section collapsed - expand with expand_section(\"7aada6da\") -->\n\n\n\n...\n\n### Tab Improvements... <!-- Section collapsed - expand with expand_section(\"cb05ee9d\") -->\n\n### Migrate from GitHub Copilot... <!-- Section collapsed - expand with expand_section(\"541521bb\") -->\n\n# Overview <!-- Section collapsed - expand with expand_section(\"1951e9e0\") -->\n\nCursor Tab is our native autocomplete feature. It's a more powerful Copilot that suggests entire diffs...\n\n\n\n### UI... <!-- Section collapsed - expand with expand_section(\"302afb4a\") -->\n\n### Toggling... <!-- Section collapsed - expand with expand_section(\"a7aa721c\") -->\n\n# Common Issues <!-- Section collapsed - expand with expand_section(\"e8d6d6c9\") -->\n\n\n\n...\n\n#### I see an update on the changelog but Cursor won't update.... <!-- Section collapsed - expand with expand_section(\"bacea48d\") -->\n\n#### I have issues with my GitHub login in Cursor / How do I log out of GitHub in Cursor?... <!-- Section collapsed - expand with expand_section(\"b2f89f32\") -->\n\n#### I can't use GitHub Codespaces.... <!-- Section collapsed - expand with expand_section(\"a6c03dcd\") -->\n\n#### I have errors connecting to Remote SSH.... <!-- Section collapsed - expand with expand_section(\"ce329b27\") -->\n\n#### Cursor Tab and Cmd K do not work behind my corporate proxy.... <!-- Section collapsed - expand with expand_section(\"15c640f4\") -->\n\n#### I just subscribed to Pro but I'm still on the free plan in the app.... <!-- Section collapsed - expand with expand_section(\"c08ef03a\") -->\n\n#### When will my usage reset again?... <!-- Section collapsed - expand with expand_section(\"f938a69b\") -->\n\n#### How do I uninstall Cursor?... <!-- Section collapsed - expand with expand_section(\"c89d3853\") -->\n\n# Troubleshooting Guide <!-- Section collapsed - expand with expand_section(\"70bdc731\") -->\n\nThe following is a list of information that is helpful to retrieve for most troubleshooting scenarios...\n\n\n\n```txt\nC:\\Users\\<your-user-name>\\AppData\\Roaming\\Cursor\\logs\n```\n\nThis is the parent folder of the folder that is opened when doing:\n\n\n\n`Ctrl` + `Shift` + `P` (to open","identifier":"llms_text","root":{"content":["\n\n",{"content":["AI Review is a feature that allows you to review your recent changes in your codebase to catch any potential bugs.\n\n\n\nYou can click into individual review items to see the full context in the editor, and chat with the AI to get more information.\n\n","\n\n",{"content":["In order for AI Review to work in your favor, you can provide custom instructions for the AI to focus on. For example,\nif you want the AI to focus on performance-related issues, you could put:\n\n","```\nfocus on the performance of my code\n```\n\n","This way, AI Review will focus on the performance of your code when scanning through your changes.\n\n","\n\n"],"expanded":false,"heading":"Custom Review Instructions","level":3,"section_id":"f5cc6b18"},{"content":["Currently, you have a several options to choose from to review:\n\n\n\n`Review Working State`\n\n\n\nThis will review your uncommitted changes.\n\n\n\n`Review Diff with Main Branch`\n\n\n\nThis will review the diff between your current working state and the main branch.\n\n\n\n`Review Last Commit`\n\n\n\nThis will review the last commit you made.\n\n","\n\n"],"expanded":false,"heading":"Review Options","level":3,"section_id":"aaa9c5c8"}],"expanded":false,"heading":"AI Review (Beta)","level":1,"section_id":"07f3277d"},{"content":["\n\n",{"content":["Cursor lets you input your own OpenAI API key to send as many AI messages as you want at your own cost.\n\n\n\nYou can get your own API key from [here](https://platform.openai.com/account/api-keys). To use your own API key, go to `Cursor Settings` > `Models` > `OpenAI API Key` and enter your API key. Then, click on the \"Verify\" button. Once your key is validated, your OpenAI API key will be enabled.\n\n","\n\n"],"expanded":false,"heading":"OpenAI API Keys","level":3,"section_id":"9db61152"},{"content":["Similar to OpenAI, you can also set your own Anthropic API key so that you will be using claude-based models at your own cost.\n\n","\n\n"],"expanded":false,"heading":"Anthropic API Keys","level":3,"section_id":"13471f04"},{"content":["For Google API keys, you can set your own API key so that you will be using Google models such as `gemini-1.5-flash-500k` at your own cost.\n\n","\n\n"],"expanded":false,"heading":"Google API Keys","level":3,"section_id":"25ff5a5c"},{"content":["Finally, you can also set your own Azure API key so that you will be using Azure OpenAI models at your own cost.\n\n","\n\n"],"expanded":false,"heading":"Azure Integration","level":3,"section_id":"d851e3fd"},{"content":["Your API key will not be stored, but it will be sent up to our server with every request. All requests are routed through our backend, because that's where we do the final prompt building.\n\n","\n\n"],"expanded":false,"heading":"Will my API key be stored or leave my device?","level":3,"section_id":"0da6eab3"}],"expanded":false,"heading":"Custom API Keys","level":1,"section_id":"919b9b9a"},{"content":["With Cursor Chat, Ctrl/⌘ K, and Terminal Ctrl/⌘ K, you can easily switch between different models of your choice.\n\n","\n\n",{"content":["Underneath the AI input box, you will see a dropdown that allows you to select the model you want to use. By default, Cursor has these models ready to use:\n\n\n\n[`GPT-4o`](https://openai.com/index/hello-gpt-4o/)\n\n\n\n[`GPT-4`](https://openai.com/index/gpt-4/)\n\n\n\n[`Claude 3.5 Sonnet`](https://www.anthropic.com/news/claude-3-5-sonnet)\n\n\n\n`cursor-small`\n\n\n\n`cursor-small` is Cursor's custom model that isn't as smart as `GPT-4`, but is faster and users have unlimited access to it.\n\n\n\nYou can add additional models under `Cursor Settings` > `Models` > `Model Names`.\n\n","\n\n"],"expanded":false,"heading":"Model Dropdown","level":3,"section_id":"b9e8ef5c"},{"content":["In long context chat, the model selection is limited to the models that support long context:\n\n\n\n[`gpt-4o-128k`](https://platform.openai.com/docs/models)\n\n\n\n[`gemini-1.5-flash-500k`](https://deepmind.google/technologies/gemini/flash/)\n\n\n\n[`claude-3-haiku-200k`](https://www.anthropic.com/news/claude-3-family)\n\n\n\n[`claude-3-sonnet-200k`](https://www.anthropic.com/news/claude-3-family)\n\n\n\n[`claude-3-5-sonnet-200k`](https://www.anthropic.com/news/claude-3-5-sonnet)\n\n","\n\n"],"expanded":false,"heading":"Long Context Only Models","level":3,"section_id":"11304f12"},{"content":["In chat, we limit to around 20,000 tokens at the moment (or less if the model does not support that much context). For cmd-K, we limit to around 10,000 tokens, to balance TTFT and quality. Long-context chat uses the model's maximum context window.\n\n","\n\n"],"expanded":false,"heading":"What context window is used for model X?","level":3,"section_id":"f1d4f327"}],"expanded":false,"heading":"Models","level":1,"section_id":"a8a96034"},{"content":["The shadow workspace is an opt-in setting you can configure to improve the quality of AI-generated code. Only some features use it.\n\n\n\nIf you have the shadow workspace enabled, background AIs can ask for lints for the code they write. This spawns a hidden window locally on your computer, to ensure that your coding experience is unaffected.\n\n\n\nThe shadow workspace will increase the memory usage from Cursor, so we recommend only enabling this feature if you have plenty of RAM.\n\n\n\nYou can read more about the shadow workspace in [our blog post on it](https://cursor.com/blog/shadow-workspace).\n\n","\n\n"],"expanded":false,"heading":"Shadow Workspace","level":1,"section_id":"19de16c2"},{"content":["Cursor's `Apply` allows you to quickly integrate a codeblock suggestion from the chat into your code.\n\n","\n\n",{"content":["To apply a code block suggestion, you can press on the play button in the top right corner of each chat code block.\n\n\n\nThis will edit your file to incorporate the code produced by Chat. Since you can add the most context and have the most back-and-forth with the model in Chat,\nwe recommend Chat + Apply for more complex AI-driven code changes.\n\n","\n\n"],"expanded":false,"heading":"Apply Code Blocks","level":3,"section_id":"3373a6d2"},{"content":["Once you have applied a code block, you can go through the diffs and accept or reject the changes. You can also click\non the \"Accept\" or \"Reject\" buttons in the top right corner of the chat code block.\n\n\n\n`Ctrl/⌘ Enter` to accept, `Ctrl/⌘ Backspace` to reject.\n\n","\n\n"],"expanded":false,"heading":"Accept or Reject","level":3,"section_id":"2e691f95"}],"expanded":false,"heading":"Apply","level":1,"section_id":"bc29386f"},{"content":["\n\n",{"content":["If a codebase isn't [indexed](/context/codebase-indexing), Cursor Chat will first attempt to compute a few search queries to\nbe used to search across your codebase. For better accuracy, it's recommended to use [embeddings search](#embeddings-search).\n\n","\n\n"],"expanded":false,"heading":"Default Codebase Chat","level":3,"section_id":"eaee06ed"},{"content":["With [codebase indexing](/context/codebase-indexing), Cursor Chat can accurately generate responses based on your codebase.\n\n\n\nBy pressing `Ctrl/⌘ + Enter` after typing a message, Cursor Chat scans through your indexed codebase to find pieces of relevant code. This is generally\ngood for quickly including code snippets to be taken into the context of the conversation. For more control over the codebase search and better accuracy,\nyou can use `@codebase`.\n\n","\n\n"],"expanded":false,"heading":"Embeddings Search","level":3,"section_id":"fdaa6b65"},{"content":["Cursor codebase chat goes through a more detailed search when `@Codebase` is used.\n\n\n\nSee more about `@Codebase` [here](/context/@-symbols/@-codebase).\n\n","\n\n"],"expanded":false,"heading":"Advanced Codebase Search","level":3,"section_id":"8b771595"}],"expanded":false,"heading":"With Codebase","level":1,"section_id":"e60b38a5"},{"content":["\n\n",{"content":["Pick your preferred AI model through the [model toggle](/advanced/models#model-dropdown), and Cursor Chat will use that model to generate responses. You can toggle between models by pressing `Ctrl/⌘ /`.\n\n\n\nBy default, Cursor Chat uses OpenAI's `GPT-4` for its AI model (specifically, the `gpt-4` label points to our instance of GPT4-Turbo).\n\n\n\nThe AI model you choose for Chat will be saved for future sessions, so you don't have to change it every time you open Cursor Chat.\n\n","\n\n"],"expanded":false,"heading":"Choose an AI Model","level":3,"section_id":"3fe825b5"},{"content":["Cursor Chat can also be used as an editor tab by clicking on the horizontal \"More\" button, and then clicking on the \"Open Chat in Editor\" button.\nCursor Chat will then behave as a regular editor tab. Pressing `Ctrl/⌘ + L` will bring up the chat tab and focus onto it.\n\n","\n\n"],"expanded":false,"heading":"In-Editor","level":3,"section_id":"edbbc751"},{"content":["You can customize the Cursor Chat under `Cursor Settings` > `Features` > `Chat`.\n\n\n\nThese settings include:\n\n\n\nAlways search the web for answers.\n\n\n\nThis will make the AI model browse the web each query for the most up-to-date information.\n\n\n\nAdd chat fading animation.\n\n\n\nThis adds a smooth animation to the AI messages as they are generated.\n\n\n\nDefault to no context.\n\n\n\nThis will make the AI model only use the user message as context, and no additional context such as current file will be included.\n\n\n\nAuto scroll chat.\n\n\n\nThis will automatically scroll the chat as the AI generates text when at the bottom of the thread.\n\n\n\nNarrow scrollbar in the chat pane.\n\n\n\nShow chat history when starting a new chat.\n\n","\n\n"],"expanded":false,"heading":"Settings","level":3,"section_id":"97125cf1"}],"expanded":false,"heading":"Customize","level":1,"section_id":"ef914ec4"},{"content":["Cursor Chat lets you ask questions or solve problems in your codebase with the most capable language models, all in your editor.\n\n\n\nFor language models to give good answers, they need to know specific things that are relevant to your codebase -- context.\n\n\n\nCursor has several built in features to provide context in chat, such as automatically including context across your entire codebase, searching the web,\nindexing documentation, and user-specified references to code blocks. They are built to eliminate the tedious copy-pasting otherwise necessary for working with language models on code.\n\n\n\nBy default, Cursor Chat is in the AI pane, which is on the opposite side of your primary sidebar. You can toggle the AI pane by pressing `Ctrl/⌘ + L`, which focuses onto the chat when opened.\nTo submit your query, press `Enter`.\n\n","\n\n",{"content":["User messages contain the text you type, along with the context you've referenced. You can go back to any previous user messages to edit and rerun your queries. This will\noverwrite any messages after that and regenerate new ones.\n\n\n\nAI messages are the responses generated from the AI model you've picked. They are paired with the user message before them. AI messages may contain parsed code blocks which can be added to your codebase with [instant apply](/chat/apply).\n\n\n\nAll user/AI messages together in the same thread are called a chat thread, and each chat thread is saved in your chat history.\n\n","\n\n"],"expanded":false,"heading":"User and AI Messages","level":3,"section_id":"ae720594"},{"content":["By pressing on the \"Previous Chats\" button on the top right of the AI pane, or by pressing `Ctrl/⌘ + Alt/Option + L`, you can see the chat history. You can click on any chat thread to go back and see the messages that make up that thread,\nand you can also modify the title of the thread by clicking the pen icon, or delete the thread by clicking the garbage can icon upon hovering over the thread in the history.\n\n\n\nThe title of a Cursor thread is just the first few words of the first user message.\n\n","\n\n"],"expanded":false,"heading":"Chat History","level":3,"section_id":"efe52475"},{"content":["By default, Cursor Chat includes the current file as context. You can submit a query without including any context by pressing `Alt/Option Enter` on submit,\nor turn on `Default to no context` under `Cursor Settings` > `Features` > `Chat`. Chats that begin with a no-context request will not add context for any messages.\n\n\n\nAs you type, you can see what will be included in context in the pills below the input box.\n\n","\n\n"],"expanded":false,"heading":"Default Context","level":3,"section_id":"42c1f720"},{"content":["By default, user messages will contain the text you type, along with the context you've referenced. You can add more custom context to each bubble with @ symbols, and by default,\nthe current viewing file will be used as context as well in the user message.\n\n\n\nSee the [@ symbols](/context/@-symbols/@-files) pages for more information.\n\n","\n\n"],"expanded":false,"heading":"Adding Context","level":3,"section_id":"d5869788"},{"content":["A convenient feature to fix linter errors in your codebase is to use the AI fix in chat. To do this, hover over the error in the editor, and click the blue AI fix button that shows up.\n\n\n\nThe keyboard shortcut for this would be to do `Ctrl/⌘ + Shift + E`.\n\n","\n\n"],"expanded":false,"heading":"AI Fix in Chat","level":3,"section_id":"b664011c"},{"content":["You can enable long context chat by going to `Cursor Settings` > `Beta` > `Long Context Chat`. With this enabled, you can toggle different chat modes through `Ctrl/⌘ .`.\n\n\n\nLong context chat allows you to include entire folders as context, since the supported models have a larger context window. Check out more about the long context only models [here](/advanced/models#long-context-only-models).\n\n","\n\n"],"expanded":false,"heading":"Long Context Chat (Beta)","level":3,"section_id":"6e451b62"}],"expanded":false,"heading":"Overview","level":1,"section_id":"37123a8d"},{"content":["Cmd K, also known or \"Ctrl K\" on Windows/Linux, allows you to generate new code or edit existing code in the editor window.\n\n","\n\n",{"content":["In Cursor, we call the bar that appears when you press `Ctrl/Cmd K` the \"Prompt Bar\". It works similarly to the AI input box for chat, in\nwhich you can type normally, or use [@ symbols](context/@-symbols) to reference other context.\n\n","\n\n"],"expanded":false,"heading":"Prompt Bars","level":3,"section_id":"549c81dc"},{"content":["If no code is selected when you press `Ctrl/Cmd K`, Cursor will generate new code based on the prompt you type in the prompt bar.\n\n","\n\n"],"expanded":false,"heading":"Inline Generation","level":3,"section_id":"ec00a895"},{"content":["For in-place edits, you can simply select the code you want to edit and type into the prompt bar.\n\n","\n\n"],"expanded":false,"heading":"Inline Edits","level":3,"section_id":"e5d47dc9"},{"content":["After each generation, you can further refine the prompt by adding more instructions to the prompt bar, and pressing `Enter` so the AI regenerates based on your follow-up instructions.\n\n","\n\n"],"expanded":false,"heading":"Follow-up Instructions","level":3,"section_id":"cce56fad"},{"content":["By default, Cursor will try to find different kinds of useful information to improve code generation, in addition to the manual [@ symbols](/context/@-symbols/@-files) you include.\n\n\n\nAdditional context may include related files, recently viewed files, and more. After gathering, Cursor ranks the context items by relevance to your edit/generation\nand keeps the top items in context for the large language model.\n\n","\n\n"],"expanded":false,"heading":"Default Context","level":3,"section_id":"45d2f0e5"},{"content":["If you press `Option/Alt Enter` while in the prompt bar, Cursor will respond to any questions you have about the selection, and the context you have attached.\n\n\n\nThe contents of this conversation could be further used in follow-up generations, so you could simply type \"do it\" after Cursor comes up with a response to generate the code after a quick question.\n\n","\n\n"],"expanded":false,"heading":"Quick Question","level":3,"section_id":"2040a81f"}],"expanded":false,"heading":"Overview","level":1,"section_id":"3d0ddc02"},{"content":["In the built-in Cursor terminal, you can press `Ctrl/⌘ K` to open a prompt bar on the bottom of the terminal.\nThis prompt bar allows you to describe your desired action in the terminal, and terminal Cmd K will generate a command.\nYou can accept the command by hitting `esc` or run the command immediately with `Ctrl/⌘ + Enter`.\n\n\n\nBy default, Terminal Cmd K sees your recent terminal history, your instructions, and anything else you put in the prompt bar as context.\n\n","\n\n"],"expanded":false,"heading":"Terminal Cmd K","level":1,"section_id":"1fd37863"},{"content":["\n\n",{"content":["You can add your current chat messages as context by using `@Chat` inside Cmd K.\nThis is useful for when you have a conversation with the AI that you'd like to be applied to edit or generate code.\n\n","\n\n"],"expanded":false,"heading":"`@Chat`","level":3,"section_id":"bb1780ee"}],"expanded":false,"heading":"@Chat","level":1,"section_id":"872fe4e9"},{"content":["\n\n",{"content":["To reference specific sections of code, you can use the `@Code` symbol.\n\n","\n\n"],"expanded":false,"heading":"`@Code`","level":3,"section_id":"1edeacf0"},{"content":["Similar to the [`@Files`](/context/@-symbols/@-files) symbol, Cursor will show a preview of the code's content so you can verify that the code you're referencing is the correct one.\n\n","\n\n"],"expanded":false,"heading":"Code Preview","level":3,"section_id":"12d9023e"},{"content":["Another way to add code snippets as context is to select the code you want to reference, and click on either \"Add to Chat\" (`Ctrl/⌘ Shift L`) or \"Add to Edit\" (`Ctrl/⌘ Shift K`).\n\n\n\nThese will add the selected code snippet to either the Chat input box or the currently active Cmd K prompt bar.\n\n\n\nTo add a selected code to a new chat, you can press `Ctrl/⌘ L`.\n\n","\n\n"],"expanded":false,"heading":"From the Editor","level":3,"section_id":"ad6528c5"}],"expanded":false,"heading":"@Code","level":1,"section_id":"aea2c6fa"},{"content":["\n\n",{"content":["Through `@Codebase`, Cursor Chat goes through these steps until it finds the most important pieces of code to use.\n\n\n\nGathering: scanning through your codebase for important files / code chunks\n\n\n\nReranking: reordering the context items based on relevancy to the query\n\n\n\nReasoning: thinking through a plan of using the context\n\n\n\nGenerating: coming up with a response\n\n\n\nAnother way of submitting an advanced codebase query is to click on the dropdown next to the `Ctrl/⌘ + Enter` button and select `reranker` for the search behavior.\nThis is only available when `@Codebase` isn't used, otherwise `@Codebase` takes precedence.\n\n","\n\n"],"expanded":false,"heading":"`@Codebase`","level":3,"section_id":"f84fb29a"}],"expanded":false,"heading":"@Codebase","level":1,"section_id":"910f126d"},{"content":["\n\n",{"content":["The `@Definitions` symbol adds all nearby definitions to Cmd K as context.\n\n","\n\n"],"expanded":false,"heading":"`@Definitions`","level":3,"section_id":"6850063a"}],"expanded":false,"heading":"@Definitions","level":1,"section_id":"700a85d7"},{"content":["\n\n",{"content":["Cursor comes with a set of third party docs crawled, indexed, and ready to be used as context. You can access them by using the `@Docs` symbol.\n\n","\n\n"],"expanded":false,"heading":"`@Docs`","level":3,"section_id":"a6b6c11d"},{"content":["If you want to crawl and index custom docs that are not already provided, you can do so by `@Docs` > `Add new doc`.\nThe following modal will appear after you've pasted in the URL of your desired doc:\n\n\n\nCursor will then index and learn the doc, and you will be able to use it as context like any other doc.\n\n","\n\n"],"expanded":false,"heading":"Add Custom Docs","level":3,"section_id":"8c7e3f18"},{"content":["Under `Cursor Settings` > `Features` > `Docs`, you will see the docs you have added.\nYou can edit, delete, or add new docs here.\n\n","\n\n"],"expanded":false,"heading":"Manage Custom Docs","level":3,"section_id":"285bdec2"}],"expanded":false,"heading":"@Docs","level":1,"section_id":"4dc9f2be"},{"content":["\n\n",{"content":["In AI input boxes such as in Cursor Chat and Cmd K, you can reference entire files by using `@Files`.\nAlso, if you continue to type after `@`, you will see your file search results after the [`@Code`](/context/@-symbols/@-code) strategy.\n\n\n\nIn order to make sure the file you're referencing is the correct file, Cursor will show a preview of the file's path. This is especially useful when you have multiple files with the same name in different folders.\n\n","\n\n"],"expanded":false,"heading":"`@Files`","level":3,"section_id":"4744a5ca"},{"content":["In Cursor's Chat, if the contents of a file is too long, Cursor will chunk the file into smaller chunks and rerank them based on relevance to the query.\n\n","\n\n"],"expanded":false,"heading":"Chat Long File References","level":3,"section_id":"6e7a959e"},{"content":["For Cmd K, Cursor uses the file references differently based on the content length as well.\n\n\n\nauto\n\n\n\nAutomatically pick one of the three reading strategies based on the file size\n\n\n\nfull file\n\n\n\nThe entire file is used as context.\n\n\n\noutline\n\n\n\nCursor parses the outline of the file and uses the information as context.\n\n\n\nchunks\n\n\n\nCursor chunks the file into smaller chunks and picks the most relevant one.\n\n","\n\n"],"expanded":false,"heading":"Cmd K Chunking Strategy","level":3,"section_id":"aea6891d"},{"content":["You can drag and drop files from the primary sidebar into Chat or Cmd K to add them as context as well.\n\n","\n\n"],"expanded":false,"heading":"Drag and Drop","level":3,"section_id":"16a0f26a"}],"expanded":false,"heading":"@Files","level":1,"section_id":"7144b97d"},{"content":["\n\n",{"content":["You can also reference entire folders in Cursor as context. `@Folders` is especially\nuseful for [long context chat](/chat/overview#long-context-chat) where you want to provide a lot of context to the AI.\n\n","\n\n"],"expanded":false,"heading":"`@Folders`","level":3,"section_id":"1a7cf269"}],"expanded":false,"heading":"@Folders","level":1,"section_id":"84af1603"},{"content":["\n\n",{"content":["In Cursor's Chat, you can use `@Git` to add git commits, diffs, or pull requests to your prompt.\n\n","\n\n"],"expanded":false,"heading":"`@Git`","level":3,"section_id":"be0ee1ba"},{"content":["One common use case for `@Git` is to allow Cursor's AI to scan the diff and look for bugs or issues that could be caused by the diff.\n\n\n\nYou could also use `@Diff of Working State` to generate a commit message from your current diffs.\n\n","\n\n"],"expanded":false,"heading":"Common Use Cases","level":3,"section_id":"b4c9b002"}],"expanded":false,"heading":"@Git","level":1,"section_id":"36538c61"},{"content":["\n\n",{"content":["In order for Cursor to visit a link before responding, type `@` and then paste in the link.\n\n","\n\n"],"expanded":false,"heading":"`@https://your-link.com`","level":3,"section_id":"b635ee29"},{"content":["By default, we automatically parse links and turn them into `@Links` in Cursor Chat.\nIf you prefer to have the link as plain text, click on the link and then click `Unlink`.\n\n","\n\n"],"expanded":false,"heading":"Remove Links","level":3,"section_id":"491d1544"}],"expanded":false,"heading":"Paste Links","level":1,"section_id":"5121dd4a"},{"content":["\n\n",{"content":["With `@Web`, Cursor constructs a search query based on the query and the context you've provided, and searches the web to\nfind relevant information as additional context. This is particulary useful for finding the most up-to-date information.\n\n","\n\n"],"expanded":false,"heading":"`@Web`","level":3,"section_id":"eedc8130"},{"content":["You can make Cursor search the web for chat on every query by turning on \"Always search the web\" under `Cursor settings` > `Features` > `Chat`. This is\nequivalent to using `@web` on every query.\n\n","\n\n"],"expanded":false,"heading":"Always On","level":3,"section_id":"b13f1ae9"}],"expanded":false,"heading":"@Web","level":1,"section_id":"3bd165a8"},{"content":["In Cursor's AI input boxes, such as in Cmd K, Chat, or Terminal Cmd K, you can use @ symbols by typing `@`. A popup menu will appear with a list of suggestions,\nand it will automatically filter to only show the most relevant suggestions based on your input.\n\n","\n\n",{"content":["You can navigate through the list of suggestions using the up/down arrow keys. You can hit `Enter` to select a suggestion. If the suggestion is a category, such as `Files`,\nthe suggestions will be filtered to only show the most relevant items within that category.\n\n","\n\n"],"expanded":false,"heading":"Keyboard Shortcuts","level":3,"section_id":"90b10825"},{"content":["You can use the up/down arrow key to navigate through the list of selected Cmd K @ symbols, `Enter` to expand/collapse the selected context item. For file references, you can use\n`Ctrl/⌘ M` to toggle the file reading strategies. Read more about file reading strategies [here](/context/@-symbols/@-files#cmd-k-chunking-strategy).\n\n","\n\n"],"expanded":false,"heading":"Cmd K Keyboard Shortcut","level":3,"section_id":"37d5c237"}],"expanded":false,"heading":"Basic Usage","level":1,"section_id":"4d3bc240"},{"content":["\n\n",{"content":["For better and more accurate codebase answers using `@codebase` or `Ctrl/⌘ Enter`, you can index your codebase. Behind the scenes, Cursor\ncomputes embeddings for each file in your codebase, and will use these to improve the accuracy of your codebase answers.\n\n\n\nYour codebase index will automatically synchronize with your latest codebase changes.\n\n\n\nThe status of your codebase indexing is under `Cursor Settings` > `Features` > `Codebase Indexing`.\n\n","\n\n"],"expanded":false,"heading":"Index your Codebase","level":3,"section_id":"bc13c3ef"},{"content":["By default, Cursor will index all files in your codebase.\n\n\n\nYou can also expand the `Show Settings` section to access more advanced options.\nHere, you can decide whether you want to enable automatic indexing for new repositories and configure the files\nthat Cursor will ignore during repository indexing, in addition to your .gitignore settings.\n\n\n\nIf you have any large content files in your project that the AI definitely doesn't need to read, [ignoring those files](/context/ignore-files) could improve the accuracy of the answers.\n\n","\n\n"],"expanded":false,"heading":"Advanced Settings","level":3,"section_id":"710e66e4"}],"expanded":false,"heading":"Codebase Indexing","level":1,"section_id":"5b8631d3"},{"content":["To ignore files to be included in Cursor features such as [codebase indexing](/context/codebase-indexing), you\ncan use a `.cursorignore` file in the root of your project. It works the same way as `.gitignore` works for git.\n\n\n\n`.cursorignore` respects `.gitignore`. If you already have `.gitignore`, the files will be ignored by default.\nIf you want to ignore additional files, you can add them to the `.cursorignore` file.\n\n","\n\n",{"content":["\n\n",{"content":["```\n# Ignore all files in the `dist` directory\ndist/\n\n# Ignore all `.log` files\n*.log\n\n# Ignore specific file `config.json`\nconfig.json\n```\n\n","Only include specific files\n\nInclude only `*.py` files in the `app` directory. Note that this is the same syntax as `.gitignore`.\n\n","```\n# ignore everything\n*\n# do not ignore app\n!app/\n# do not ignore directories inside app\n!app/*/\n!app/**/*/\n# don't ignore python files\n!*.py\n```\n\n","Troubleshooting\n\nThe ignore file syntax is sometimes a bit confusing. The `.cursorignore` file follows the exact same syntax as `.gitignore`, so if you are trying an ignore file and it doesn't work the way you expect it to, we recommend a Google search for the issue, replacing `cursorignore` in your search query with `gitignore`. Probably someone will have had the same issue and StackOverflow will have a good answer.\n\n\n\nOne common example: [here is how you ignore all files except those with a `.php` extension](https://stackoverflow.com/a/50606028) (just adding `*` followed by `!*.php` does not work because the gitignore file discoverer will not descend into and discover any `.php` files in subdirectories).\n\n","\n\n"],"expanded":false,"heading":"Ignore specific files","level":4,"section_id":"39f7e5d9"}],"expanded":false,"heading":"Example `.cursorignore` files","level":3,"section_id":"dce749d8"}],"expanded":false,"heading":"Ignore Files","level":1,"section_id":"cb6ef065"},{"content":["You can add custom instructions to Cursor by modifying the `Rules for AI` section under `Cursor Settings` > `General` > `Rules for AI`.\n\n\n\nThis custom instruction will be included for features such as Cursor Chat and Ctrl/⌘ K.\n\n","\n\n",{"content":["For project-specific instructions, you can include the instructions in a `.cursorrules` file in the root of your project.\n\n\n\nAs the same as the \"Rules for AI\" section, the instructions in the `.cursorrules` file will be included for features such as Cursor Chat and Ctrl/⌘ K.\n\n","\n\n"],"expanded":false,"heading":"`.cursorrules`","level":3,"section_id":"9fe88951"}],"expanded":false,"heading":"Rules for AI","level":1,"section_id":"612eab37"},{"content":["Cursor is a fork of VS Code. This allows us to focus on making the best way to code with AI, while offering a familiar text editing experience.\n\n","\n\n",{"content":["You can import your VS Code configuration into Cursor with one-click. Navigate to `Cursor Settings` > `General` > `Account`.\n\n","\n\n"],"expanded":false,"heading":"Import Extensions, Themes, Settings, and Keybindings","level":3,"section_id":"2f877c5c"},{"content":["We periodically rebase Cursor onto the latest version of VS Code.\n\n","\n\n"],"expanded":false,"heading":"Staying Up to Date","level":3,"section_id":"bcdd5afa"},{"content":["As a standalone application, Cursor has more control over the UI of the editor, enabling greater AI integration. Some of our features, like Cursor Tab and CMD-K, are not possible as plugins to existing coding environments.\n\n","\n\n"],"expanded":false,"heading":"Why Not an Extension?","level":3,"section_id":"e4cc6d86"},{"content":["You can open Cursor specific settings pane by clicking on the gear button top-right, by pressing `Ctrl/⌘ + Shift + J`, or with `Ctrl/⌘ + Shift + P` and typing `Cursor Settings`.\n\n\n\nYou can open VS Code specific settings with `Ctrl/⌘ + Shift + P`, and then typing `VS Code Settings`.\n\n","\n\n"],"expanded":false,"heading":"Settings","level":3,"section_id":"a76da175"},{"content":["The activity bar is horizontal by default to save room for chat. If you prefer the normal vertical activity bar you can go to the VS Code settings and set `workbench.activityBar.orientation` to `vertical`, and restart Cursor.\n\n","\n\n"],"expanded":false,"heading":"Why is the Activity Bar in Cursor horizontal?","level":3,"section_id":"3ef08f65"}],"expanded":false,"heading":"Migrate from VS Code","level":1,"section_id":"8f0c463a"},{"content":["\n\n",{"content":["Cursor offers multiple subscription tiers to fit your needs.\n\n\n\n**Hobby**\n\n\n\n14 days **Pro trial**\n\n\n\n50 slow `premium` model uses\n\n\n\n200 `cursor-small` uses\n\n\n\n2000 [completions](/tab/overview) uses\n\n\n\n**Pro**\n\n\n\n500 fast `premium` model uses per month\n\n\n\nUnlimited slow `premium` model uses\n\n\n\nUnlimited `cursor-small` uses\n\n\n\nUnlimited [completions](/tab/overview) completions\n\n\n\n10 `Claude Opus` uses per month\n\n\n\n**Business**\n\n\n\nUsage information is the same as the `Pro` tier\n\n\n\nExtra benefits, detailed on the [pricing page](https://cursor.com/pricing)\n\n","\n\n"],"expanded":false,"heading":"Subscription Tiers","level":3,"section_id":"01411331"},{"content":["GPT-4, GPT-4o, and Claude 3.5 Sonnet are all counted as `premium` models. Each request to Claude 3.5 Haiku is counted as 1/3 of a `premium` model request.\n\n","\n\n"],"expanded":false,"heading":"Premium models","level":3,"section_id":"3fa2b195"},{"content":["All new users receive a 14-day Pro trial, granting access to all Pro features. After the 14-day period, users who have not upgraded will revert to the Hobby plan.\n\n","\n\n"],"expanded":false,"heading":"Pro Trial","level":3,"section_id":"b7564d18"},{"content":["By default, Cursor servers try to give all users fast `premium` model requests. However, during peak periods,\nusers who run out of fast `premium` credits will be moved to a slow pool, which essentially is a queue of users waiting for\na fast `premium` request to become available.\n\n\n\nThis queue is fair, and Cursor will do everything possible to keep the queue as short as possible.\nHowever, if you need more fast `premium` credits and don't want to wait, you can add more requests on the [settings page](https://cursor.com/settings).\n\n","\n\n"],"expanded":false,"heading":"Fast and Slow Requests","level":3,"section_id":"18fef806"},{"content":["You can check your usage on the [Cursor Settings](https://cursor.com/settings) page. You can reach this page inside the Cursor application as well,\nunder `Cursor Settings` > `General` > `Account`, and press \"Manage Subscription\" for pro users, or \"Manage\" for business users.\n\n\n\nCursor usage resets monthly, based on your subscription start date.\n\n","\n\n"],"expanded":false,"heading":"Check Your Usage","level":3,"section_id":"87eee437"},{"content":["You may opt in to usage-based pricing for requests that go beyond what is included in your plan by visiting your [settings page](https://cursor.com/settings).\n\n\n\nUsage-based pricing details:\n\n\n\nUsage-based pricing is per calendar month (not necessarily same as your billing cycle, will be billed roughly on the 2nd-3rd day of the month)\n\n\n\nIf you immediately cancel a request or if it errors we do not count it\n\n\n\nYou can configure a hard limit, and you will never ever have to pay more than the hard limit per month (for the usage-based pricing)\n\n\n\nRight now, usage-based pricing only applies to Claude 3 Opus and a few models in long context chat.\n\n","\n\n"],"expanded":false,"heading":"Optional Usage-based Pricing","level":3,"section_id":"5a0056d1"}],"expanded":false,"heading":"Usage","level":1,"section_id":"c13da08f"},{"content":["\n\n",{"content":["With `Privacy Mode` enabled, none of your code will ever be stored by us or any third-party. Otherwise, we may collect prompts, code snippets and telemetry data to improve Cursor. You can [read more about Privacy Mode here](https://cursor.com/privacy).\n\n\n\nYou can enable `Privacy Mode` at onboarding or under `Cursor Settings` > `General` > `Privacy Mode`.\n\n","\n\n"],"expanded":false,"heading":"What is Privacy Mode?","level":3,"section_id":"9d9dab42"},{"content":["Yes! Even if you use your API key, your requests will still go through our backend! That's where we do our final prompt building.\n\n","\n\n"],"expanded":false,"heading":"Are requests always routed through the Cursor backend?","level":3,"section_id":"65c9182e"},{"content":["It does not! If you choose to index your codebase, Cursor will upload your codebase in small chunks to our server to compute embeddings, but all plaintext code ceases to exist after the life of the request.\n\n\n\nThe embeddings and metadata about your codebase (hashes, obfuscated file names) are stored in our database, but none of your code is.\n\n\n\nYou can read more about this on our [security page](https://cursor.com/security).\n\n","\n\n"],"expanded":false,"heading":"Does indexing the codebase require storing code?","level":3,"section_id":"31b09198"}],"expanded":false,"heading":"Privacy FAQ","level":1,"section_id":"b4413bc1"},{"content":["\n\n",{"content":["You can also use Cursor Tab in the \"Go to Definition\" or \"Go to Type Definition\" peek views. This is useful, for example, when adding a new argument to a function call.\n\n\n\nWe especially enjoy using this in vim in conjunction with `gd` to, for example, modify a function definition, then fix all of its usages in one go.\n\n","\n\n"],"expanded":false,"heading":"Tab in Peek","level":3,"section_id":"298b4a5e"},{"content":["Cursor can also predict where you will go to after an accepted edit.\nIf available, you will be able to press tab to go to the next location, allowing you to tab-tab-tab through edits.\n\n","\n\n"],"expanded":false,"heading":"<div className=\"flex items-center\" style={{ gap: '6px' }}>  <span className=\"cursor-pointer my-0\">Cursor Prediction</span></div>","level":3,"section_id":"a3533dc3"},{"content":["You can accept the next word of a suggestion by pressing `Ctrl/⌘` and the right arrow (or by setting `editor.action.inlineSuggest.acceptNextWord` to your preferred keybinding).\n\n\n\nTo enable partial accepts, navigate to `Cursor Settings` > `Features` > `Cursor Tab`.\n\n","\n\n"],"expanded":false,"heading":"<div className=\"flex items-center\" style={{ gap: '6px' }}>  <span className=\"cursor-pointer my-0\">Partial Accepts</span></div>","level":3,"section_id":"5dc816a2"}],"expanded":false,"heading":"Advanced Features","level":1,"section_id":"85ffb0b2"},{"content":["\n\n",{"content":["The biggest difference is the way Cursor and GitHub Copilot complete code.\n\n\n\nGitHub Copilot can insert text at your cursor position. It cannot edit the code around your cursor or remove text.\n\n\n\nCursor can insert text at your cursor, and much more:\n\n\n\nMulti-character edits\n\n\n\nInstruction-based edits\n\n\n\nFurther, Cursor has a history of your recent changes in the context window, so it knows what you are trying to do next.\n\n","\n\n"],"expanded":false,"heading":"Tab Improvements","level":3,"section_id":"cb05ee9d"},{"content":["Since Cursor comes by default with GitHub Copilot, you might have GitHub Copilot and Cursor installed at the same time. We recommend turning off GitHub Copilot when you want to use Cursor.\n\n\n\nBy default, Cursor takes precedence over GitHub Copilot. If you want to use GitHub Copilot, you can [disable Cursor](/tab/overview#copilot-settings) in the settings.\n\n","\n\n"],"expanded":false,"heading":"Migrate from GitHub Copilot","level":3,"section_id":"541521bb"}],"expanded":false,"heading":"Migrate from GitHub Copilot","level":1,"section_id":"7aada6da"},{"content":["Cursor Tab is our native autocomplete feature. It's a more powerful Copilot that suggests entire diffs with especially good memory.\n\n\n\nPowered by a custom model, Cursor Tab can:\n\n\n\nSuggest edits around your cursor, not just insertions of additional code.\n\n\n\nModify multiple lines at once.\n\n\n\nMake suggestions based on your recent changes and linter errors.\n\n\n\nFree users receive 2000 suggestions at no cost. Pro and Business plans receive unlimited suggestions.\n\n","\n\n",{"content":["When Cursor is only adding additional text, completions will appear as grey text. If a suggestion modifies existing code,\nit will appear as a diff popup to the right of your current line.\n\n\n\nYou can accept a suggestion by pressing `Tab`, or reject it by pressing `Esc`. To partially accept a suggestion word-by-word, press `Ctrl/⌘ →`.\nTo reject a suggestion, just keep typing, or use `Escape` to cancel/hide the suggestion.\n\n\n\nEvery keystroke or cursor movement, Cursor will attempt to make a suggestion based on your recent changes. However, Cursor will not always show a suggestion; sometimes the model has predicted that there's no change to be made.\n\n\n\nCursor can make changes from one line above to two lines below your current line.\n\n","\n\n"],"expanded":false,"heading":"UI","level":3,"section_id":"302afb4a"},{"content":["To turn the feature on or off, hover over \"Cursor Tab\" icon on the status bar in the bottom right of the application.\n\n","\n\n"],"expanded":false,"heading":"Toggling","level":3,"section_id":"a7aa721c"}],"expanded":false,"heading":"Overview","level":1,"section_id":"1951e9e0"},{"content":["\n\n",{"content":["If the update is very new, it might not have rolled out to you yet. We do staged rollouts, which means we release new updates to a few randomly selected users first before releasing them to everyone. Typically, reaching all users takes around 5 hours from the first user. For larger updates, it can take longer.\n\n","\n\n"],"expanded":false,"heading":"I see an update on the changelog but Cursor won't update.","level":4,"section_id":"bacea48d"},{"content":["You can try using the `Sign Out of GitHub` command from the command palette `Ctrl/⌘ + Shift + P`.\n\n","\n\n"],"expanded":false,"heading":"I have issues with my GitHub login in Cursor / How do I log out of GitHub in Cursor?","level":4,"section_id":"b2f89f32"},{"content":["Unfortunately, we don't support GitHub Codespaces yet.\n\n","\n\n"],"expanded":false,"heading":"I can't use GitHub Codespaces.","level":4,"section_id":"a6c03dcd"},{"content":["Currently, we don't support SSHing into Mac or Windows machines. If you're not using a Mac or Windows machine, please report your issue to us in the [forum](https://forum.cursor.com/). It would be helpful to include some logs for better assistance.\n\n","\n\n"],"expanded":false,"heading":"I have errors connecting to Remote SSH.","level":4,"section_id":"ce329b27"},{"content":["Cursor Tab and Cmd K use HTTP/2 by default, which allows us to use less resources with lower latency. Some corporate proxies (e.g. Zscaler in certain configurations) block HTTP/2. To fix this, you can set `\"cursor.general.disableHttp2\": true` in the settings (`Cmd/Ctrl + ,` and then search for `http2`).\n\n","\n\n"],"expanded":false,"heading":"Cursor Tab and Cmd K do not work behind my corporate proxy.","level":4,"section_id":"15c640f4"},{"content":["Try logging out and logging back in from the [Cursor Settings Popup](/get-started/glossary#cursor-settings-popup).\n\n","\n\n"],"expanded":false,"heading":"I just subscribed to Pro but I'm still on the free plan in the app.","level":4,"section_id":"c08ef03a"},{"content":["If you're subscribed to Pro you can click on `Manage Subscription` from the [Dashboard](https://cursor.com/settings) and your plan renewal date will be displayed at the top.\n\n\n\nIf you're a free user you can check when you got the first email from us in your inbox. Your usage will reset every month from that date.\n\n","\n\n"],"expanded":false,"heading":"When will my usage reset again?","level":4,"section_id":"f938a69b"},{"content":["You can follow [this guide](https://code.visualstudio.com/docs/setup/uninstall) to uninstall Cursor. Replace every occurrence of \"VS Code\" or \"Code\" with \"Cursor\", and \".vscode\" with \".cursor\".\n\n","\n\n"],"expanded":false,"heading":"How do I uninstall Cursor?","level":4,"section_id":"c89d3853"}],"expanded":false,"heading":"Common Issues","level":1,"section_id":"e8d6d6c9"},{"content":["The following is a list of information that is helpful to retrieve for most troubleshooting scenarios within Cursor:\n\n\n\n**01)**  Screenshot of issue (redact any sensitive information)\n\n\n\n**02)**  Steps to reproduce\n\n\n\n**03)**  System Information from:\n\n\n\n`Cursor` > `Help` > `About`\n\n\n\n**04)**  Are you using a VPN or Zscaler?\n\n\n\n**05)**  Developer tools console errors\n\n\n\nOpen developer tools via:\n\n\n\n`Cursor` > `Help` > `Toggle Developer Tools`\n\n\n\nand then click `Console` and see if there are any related errors.\n\n\n\n**06)**  Logs\n\n\n\nOn Windows, you can find logs here:\n\n","```txt\nC:\\Users\\<your-user-name>\\AppData\\Roaming\\Cursor\\logs\n```\n\n","This is the parent folder of the folder that is opened when doing:\n\n\n\n`Ctrl` + `Shift` + `P` (to open command palette in Cursor)\n\n\n\nTyping and selecting `Developer: Open Logs Folder`\n\n\n\nYou can also view logs in `Cursor` > `Terminal` > `Output` and then click on the dropdown and select `Window` or one of the other Cursor specific options, such as  `Cursor Tab` or `Cursor Indexing & Retrieval`.\n\n"],"expanded":false,"heading":"Troubleshooting Guide","level":1,"section_id":"70bdc731"}],"expanded":true,"heading":null,"level":0,"section_id":"5ec75cf4"},"title":"Abridged llms.txt","type":"markdown"},{"content":"# Overview\nCursor Tab is our native autocomplete feature. It's a more powerful Copilot that suggests entire diffs with especially good memory.\n\n\n\nPowered by a custom model, Cursor Tab can:\n\n\n\nSuggest edits around your cursor, not just insertions of additional code.\n\n\n\nModify multiple lines at once.\n\n\n\nMake suggestions based on your recent changes and linter errors.\n\n\n\nFree users receive 2000 suggestions at no cost. Pro and Business plans receive unlimited suggestions.\n\n\n\n### UI\nWhen Cursor is only adding additional text, completions will appear as grey text. If a suggestion modifies existing code,\nit will appear as a diff popup to the right of your current line.\n\n\n\nYou can accept a suggestion by pressing `Tab`, or reject it by pressing `Esc`. To partially accept a suggestion word-by-word, press `Ctrl/⌘ →`.\nTo reject a suggestion, just keep typing, or use `Escape` to cancel/hide the suggestion.\n\n\n\nEvery keystroke or cursor movement, Cursor will attempt to make a suggestion based on your recent changes. However, Cursor will not always show a suggestion; sometimes the model has predicted that there's no change to be made.\n\n\n\nCursor can make changes from one line above to two lines below your current line.\n\n\n\n### Toggling\nTo turn the feature on or off, hover over \"Cursor Tab\" icon on the status bar in the bottom right of the application.","identifier":"1951e9e0","title":"Overview","type":"markdown"},{"content":"# Migrate from GitHub Copilot\n\n\n### Tab Improvements\nThe biggest difference is the way Cursor and GitHub Copilot complete code.\n\n\n\nGitHub Copilot can insert text at your cursor position. It cannot edit the code around your cursor or remove text.\n\n\n\nCursor can insert text at your cursor, and much more:\n\n\n\nMulti-character edits\n\n\n\nInstruction-based edits\n\n\n\nFurther, Cursor has a history of your recent changes in the context window, so it knows what you are trying to do next.\n\n\n\n### Migrate from GitHub Copilot\nSince Cursor comes by default with GitHub Copilot, you might have GitHub Copilot and Cursor installed at the same time. We recommend turning off GitHub Copilot when you want to use Cursor.\n\n\n\nBy default, Cursor takes precedence over GitHub Copilot. If you want to use GitHub Copilot, you can [disable Cursor](/tab/overview#copilot-settings) in the settings.","identifier":"7aada6da","title":"Migrate from GitHub Copilot","type":"markdown"}]}

const llms_text_urls = {
  // "Anthropic": "https://docs.anthropic.com/llms-full.txt", // long + popular
  "Perplexity": "https://docs.perplexity.ai/llms-full.txt",
  "Cursor": "https://docs.cursor.com/llms-full.txt",
  "ElevenLabs": "https://elevenlabs.io/docs/llms-full.txt",
  "Mintlify": "https://mintlify.com/docs/llms-full.txt",
  "Pinecone": "https://docs.pinecone.io/llms-full.txt",
  "Trigger.dev": "https://trigger.dev/docs/llms-full.txt",
  "Turso": "https://docs.turso.tech/llms-full.txt",
  // "Upstash": "https://upstash.com/docs/llms-full.txt", // long
  "Dub": "https://dub.co/docs/llms-full.txt",
  "Envoyer": "https://docs.envoyer.io/llms-full.txt",
  "Resend": "https://resend.com/docs/llms-full.txt",
  "BaseHub": "https://docs.basehub.com/llms-full.txt",
  "CrewAI": "https://docs.crewai.com/llms-full.txt",
  // "Tinybird": "https://www.tinybird.co/docs/llms-full.txt",
  "OpenPipe": "https://docs.openpipe.ai/llms-full.txt",
  // "Matt Rickard": "https://matt-rickard.com/llms-full.md", // long
  // "Unstructured": "https://docs.unstructured.io/llms-full.txt",
  "Plain": "https://www.plain.com/docs/llms-full.txt",
  "Flatfile": "https://flatfile.com/docs/llms-full.txt",
  "Loops": "https://loops.so/docs/llms-full.txt",
  "EmbedChain": "https://docs.embedchain.ai/llms-full.txt",
  "Stedi": "https://www.stedi.com/docs/llms-full.txt",
  "Galileo": "https://docs.rungalileo.io/llms-full.txt",
  "Activepieces": "https://www.activepieces.com/docs/llms-full.txt",
  "Fireworks AI": "https://docs.fireworks.ai/llms-full.txt",
  "Smartcar": "https://smartcar.com/docs/llms-full.txt",
  "PrimeV": "https://docs.primev.xyz/llms-full.txt",
  "Datafold": "https://docs.datafold.com/llms-full.txt",
  "Dynamic": "https://docs.dynamic.xyz/llms-full.txt",
  "ProjectDiscovery": "https://docs.projectdiscovery.io/llms-full.txt",
  "Vital": "https://docs.tryvital.io/llms-full.txt",
  // "Infisical": "https://infisical.com/docs/llms-full.txt",
  "Inkeep": "https://docs.inkeep.com/llms-full.txt",
  // "Velt": "https://docs.velt.dev/llms-full.txt",
  "AI Squared": "https://docs.squared.ai/llms-full.txt",
  // "Fabric": "https://developer.fabric.inc/llms-full.txt",
  // "Vercel": "https://sdk.vercel.ai/llms.txt",
  // "Zapier": "https://docs.zapier.com/llms-full.txt",
  "IonQ": "https://docs.ionq.com/llms-full.txt",
  // "Axiom": "https://axiom.co/docs/llms-full.txt",
  "MeshConnect": "https://docs.meshconnect.com/llms-full.txt",
  // "FlowX": "https://docs.flowx.ai/llms-full.txt",
  "LuxAlgo": "https://docs.luxalgo.com/llms-full.txt",
  "Salesbricks": "https://docs.salesbricks.com/llms-full.txt",
  "Hyperline": "https://docs.hyperline.co/llms-full.txt",
  "Method Financial": "https://docs.methodfi.com/llms-full.txt",
  "Cobo": "https://www.cobo.com/developers/llms-full.txt",
  // "Mangopay": "https://docs.mangopay.com/llms-full.txt", // superlong
  // "Lago": "https://getlago.com/docs/llms-full.txt",
  "Sardine": "https://docs.sardine.ai/llms-full.txt",
  "Oxla": "https://docs.oxla.com/llms-full.txt",
  "Aptible": "https://www.aptible.com/docs/llms-full.txt",
  "Roc": "https://www.roc-lang.org/llms.txt",
}

function App() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [artifacts, setArtifacts] = useState([]);
  const subscriptionCheckRef = useRef();
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [suggestions, setSuggestions] = useState([]);
  const chatHistoryRef = useRef(null);
  const [selectedLlm, setSelectedLlm] = useState('');
  const [showLlmModal, setShowLlmModal] = useState(false);
  const [isLlmLoading, setIsLlmLoading] = useState(false);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('recorded')) {
      if (urlParams.has('cursor_features')) {
        setArtifacts(cursor_example.artifacts);
        setMessages(cursor_example.messages);
      }
      return;
    }
    if (urlParams.has('noSuggestions')) {//TODO! update
      setShowSuggestions(false);
    }
    setShowLlmModal(true);
  }, []);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    if (!urlParams.has('recorded')) {
      scrollToBottom();
    }
  }, [messages]);

  const handleArtifactChange = (identifier, newContent) => {
    setArtifacts(artifacts.map(artifact => 
      artifact.identifier === identifier 
        ? { ...artifact, content: newContent }
        : artifact
    ));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim()) return;
    if (!subscriptionCheckRef.current.checkSubscription()) return;

    setIsLoading(true);
    const newMessages = [...messages, { role: 'user', content: inputMessage }];
    console.log(JSON.stringify({
      "messages": newMessages,
      "artifacts": artifacts
    }));
    setMessages([...newMessages, { role: 'assistant', content: '' }]);
    setInputMessage('');

    try {
      const urlParams = new URLSearchParams(window.location.search);
      const conversationType = urlParams.has('dumb') ? 'dumb' : 'smart';//TODO! can remove

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          messages: newMessages,
          artifacts: artifacts,
          conversation_type: conversationType
        })
      });
      
      const result = await response.json();
      
      if (result.status === 'success') {
        setMessages(result.messages);
        if (result.artifacts) {
          setArtifacts(result.artifacts);
        }
      } else {
        setMessages([...newMessages, { role: 'assistant', content: 'Error: Failed to get response' }]);
      }
    } catch (error) {
      console.error('Error:', error);
      setMessages([...newMessages, { role: 'assistant', content: 'Error: Failed to send message' }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setInputMessage(suggestion);
  };

  const scrollToBottom = () => {
    if (chatHistoryRef.current) {
      // Check if scrollTo exists (will be true in browser, false in tests)
      if (chatHistoryRef.current.scrollTo) {
        chatHistoryRef.current.scrollTo({
          top: chatHistoryRef.current.scrollHeight,
          behavior: 'smooth'
        });
      }
    }
  };

  const handleLlmSelect = async (llmName) => {
    setIsLlmLoading(true);
    setSelectedLlm(llmName);
    try {
      const response = await fetch('/api/choose_llms_txt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          name: llmName,
          url: llms_text_urls[llmName]
        })
      });
      
      const result = await response.json();
      if (result.questions) {
        setSuggestions(result.questions);
      }
      if (result.artifact) {
        setArtifacts([...artifacts, result.artifact]);
        setShowLlmModal(false);
      }
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setIsLlmLoading(false);
    }
  };

  return (
    <div className="app">
      {showLlmModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h2>llms.txt Explorer</h2>
            <p className="modal-description">
              llms.txt is a standardized file that helps language models better understand websites by providing curated, LLM-friendly content and relevant links. It allows site owners to specify exactly what information should be used when answering questions about their platform.
            </p>
            <p className="modal-instruction">Please select a website's llms.txt to explore:</p>
            <select 
              className="llm-dropdown"
              onChange={(e) => handleLlmSelect(e.target.value)}
              disabled={isLlmLoading}
              value={selectedLlm}
            >
              <option value="">Select an llms.txt...</option>
              {Object.keys(llms_text_urls).map(key => (
                <option key={key} value={key}>
                  {key}
                </option>
              ))}
            </select>
            {isLlmLoading && <div className="spinner"></div>}
          </div>
        </div>
      )}
      <SubscriptionCheck ref={subscriptionCheckRef} />
      <div className="chat-container">
        <div className="chat-history" ref={chatHistoryRef}>
          {messages.map((message, index) => (
            <div key={index} className={`message ${message.role}`}>
              <div className="message-content">
                <MessageContent content={message.content} />
              </div>
            </div>
          ))}
        </div>
        <form onSubmit={handleSubmit} className="chat-input-form">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="Type your message..."
            className="chat-input"
            disabled={isLoading}
          />
          <button 
            type="submit" 
            className="chat-submit"
            disabled={isLoading}
          >
            Send
          </button>
        </form>
      </div>
      <div className="right-panel">
        <ArtifactPanel 
          artifacts={artifacts} 
          onArtifactChange={handleArtifactChange}
          toolName={selectedLlm}
          originalLink={llms_text_urls[selectedLlm]}
        />
      </div>
      {showSuggestions && suggestions.length > 0 && (
        <div className="suggestions-panel">
          <div className="suggestions-title">Suggested Messages</div>
          <button 
            className="close-suggestions"
            onClick={() => setShowSuggestions(false)}
          >
            ×
          </button>
          <ul className="suggestions-list">
            {suggestions.map((suggestion, index) => (
              <li key={index} className="suggestion-item">
                <button 
                  className="suggestion-button"
                  onClick={() => handleSuggestionClick(suggestion)}
                >
                  ←
                </button>
                <span>{suggestion}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

export default App;
